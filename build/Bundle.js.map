{"version":3,"sources":["build/node_modules/browser-pack/_prelude.js","build/refactor/public/js/Main.js","build/refactor/public/js/controllers/MainDesignerController.js","build/refactor/public/js/models/CircuitDesigner.js","build/refactor/public/js/models/Propagation.js","build/refactor/public/js/models/ioobjects/Component.js","build/refactor/public/js/models/ioobjects/Gate.js","build/refactor/public/js/models/ioobjects/IOObject.js","build/refactor/public/js/models/ioobjects/InputPort.js","build/refactor/public/js/models/ioobjects/OutputPort.js","build/refactor/public/js/models/ioobjects/Wire.js","build/refactor/public/js/models/ioobjects/gates/ANDGate.js","build/refactor/public/js/models/ioobjects/inputs/Switch.js","build/refactor/public/js/models/ioobjects/outputs/LED.js","build/refactor/public/js/utils/Browser.js","build/refactor/public/js/utils/Camera.js","build/refactor/public/js/utils/Constants.js","build/refactor/public/js/utils/Images.js","build/refactor/public/js/utils/math/MathUtils.js","build/refactor/public/js/utils/math/Matrix.js","build/refactor/public/js/utils/math/Transform.js","build/refactor/public/js/utils/math/Vector.js","build/refactor/public/js/utils/rendering/Grid.js","build/refactor/public/js/utils/rendering/Renderer.js","build/refactor/public/js/utils/rendering/ioobjects/ComponentRenderer.js","build/refactor/public/js/utils/rendering/ioobjects/IOPortRenderer.js","build/refactor/public/js/utils/rendering/ioobjects/WireRenderer.js","build/refactor/public/js/views/MainDesignerView.js"],"names":[],"mappings":"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","file":"Bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// @flow\n\nvar Images = require(\"./utils/Images\");\n// var ICDesignerController = require(\"./controllers/ICDesignerController\");\nvar MainDesignerController = require(\"./controllers/MainDesignerController\");\n// var InputController = require(\"./utils/input/InputController\");\n\nfunction Start() {\n    Load(Init);\n}\n\nfunction Load(onFinishLoading: () => void) {\n    Images.Load(onFinishLoading);\n}\n\nfunction Init() {\n    // Initialize all controllers\n    MainDesignerController.Init();\n    // ICDesignerController.Init();\n\n    MainDesignerController.Render();\n    // InputController.Init();\n}\n\nStart();\n","// @flow\nvar V = require(\"../utils/math/Vector\").V;\n\nvar CircuitDesigner = require(\"../models/CircuitDesigner\");\n\nvar MainDesignerView = require(\"../views/MainDesignerView\");\n\n\nvar Switch = require(\"../models/ioobjects/inputs/Switch\");\nvar ANDGate = require(\"../models/ioobjects/gates/ANDGate\");\nvar LED = require(\"../models/ioobjects/outputs/LED\");\n\nvar MainDesignerController = (function() {\n    var designer: CircuitDesigner;\n    var view: MainDesignerView;\n    \n    return {\n        Init: function(): void {\n            designer = new CircuitDesigner();\n            view = new MainDesignerView();\n    \n            \n            \n            var s1 = new Switch();\n            var s2 = new Switch();\n            var g1 = new ANDGate();\n            var l1 = new LED();\n            \n            s1.setPos(V(-100, -100));\n            s2.setPos(V(-100, 100));\n            g1.setPos(V(0, 0));\n            l1.setPos(V(100, 0));\n            \n            designer.addObjects([s1, s2, g1, l1]);\n            \n            designer.connect(s1, 0,  g1, 0);\n            designer.connect(s2, 0,  g1, 1);\n            \n            designer.connect(g1, 0,  l1, 0);\n            \n            s1.activate(true);\n            \n            console.log(\"LED active: \" + l1.isOn().toString());\n            \n            s1.activate(false);\n            s2.activate(true);\n            \n            console.log(\"LED active: \" + l1.isOn().toString());\n            \n            s1.activate(true);\n            \n            console.log(\"LED active: \" + l1.isOn().toString());\n        },\n        Render: function(): void {\n            view.render(designer, []);\n        }\n    };\n})();\n\nmodule.exports = MainDesignerController;","// @flow\n\nvar Propagation = require(\"./Propagation\");\n\nvar IOObject  = require(\"./ioobjects/IOObject\");\nvar Component = require(\"./ioobjects/Component\");\nvar Wire      = require(\"./ioobjects/Wire\");\n\nclass CircuitDesigner {\n\tobjects: Array<Component>;\n\twires: Array<Wire>;\n\tpropagationQueue: Array<Propagation>;\n\tupdateRequests: number;\n\t\n\tconstructor() {\n\t\tthis.objects = [];\n\t\tthis.wires   = [];\n\t\tthis.propagationQueue = [];\n\t\tthis.updateRequests = 0;\n\t}\n\t\n\treset(): void {\n\t\tthis.objects = [];\n\t\tthis.wires = [];\n\t\tthis.propagationQueue = [];\n\t\tthis.updateRequests = 0;\n\t}\n\t\n\t/**\n\t * Add a propogation request to the queue.\n\t * Also checks if there are currently no requests and starts the cycle if\n\t *  there aren't\n\t * \n\t * @param sender\n\t * @param receiver\n\t * @param signal\n\t */\n\tpropogate(receiver: IOObject, signal: boolean): void {\n\t\tthis.propagationQueue.push(new Propagation(receiver, signal));\n\t\t\n\t\tif (this.updateRequests == 0) {\n\t\t\tthis.updateRequests++;\n\t\t\t// setTimeout(update, PROPAGATION_TIME);\n\t\t\tthis.update();\n\t\t}\n\t}\n\t\n\t/**\n\t * \n\t * @return True if the updated component(s) require rendering\n\t */\n\tupdate(): boolean {\n\t\t// Create temp queue before sending, in the case that sending them triggers\n\t\t//   more propagations to occur \n\t\tvar tempQueue = [];\n\t\twhile (this.propagationQueue.length > 0)\n\t\t\ttempQueue.push(this.propagationQueue.pop());\n\t\t\n\t\twhile (tempQueue.length > 0)\n\t\t\ttempQueue.pop().send();\n\t\t\n\t\t// If something else was added during the sending, add request\n\t\tif (this.propagationQueue.length > 0)\n\t\t\tthis.updateRequests++;\n\t\t\n\t\t\t\t\n\t\tthis.updateRequests--;\n\t\t\n\t\tif (this.updateRequests > 0) {\n\t\t\t// setTimeout(update, PROPAGATION_TIME)\n\t\t\tthis.update();\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\taddObjects(objects: Array<Component>): void {\n\t\tfor (var i = 0; i < objects.length; i++)\n\t\t\tthis.addObject(objects[i]);\n\t}\n\t\n\taddObject(obj: Component): void {\n\t\tif (this.objects.includes(obj))\n\t\t\tthrow new Error(\"Attempted to add object that already existed!\");\n\t\t\n\t\tobj.setDesigner(this);\n\t\tthis.objects.push(obj);\n\t}\n\t\n\tconnect(c1: Component, i1: number, c2: Component, i2: number): void {\n\t\tvar wire = new Wire(c1.getOutput(i1), c2.getInput(i2));\n\t\tthis.wires.push(wire);\n\t\t\n\t\tc1.connect(i1, wire);\n\t\tc2.setInput(i2, wire);\n\t}\n\t\n\tremoveObject(obj: Component): void {\n\t\tif (!this.objects.includes(obj))\n\t\t\tthrow new Error(\"Attempted to remove object that doesn't exist!\");\n\t\t\t\t\t\n\t\t// completely disconnect from the circuit\n\t}\n\t\n\tgetObjects(): Array<Component> {\n\t\treturn this.objects;\n\t}\n\t\n\tgetWires(): Array<Wire> {\n\t\treturn this.wires;\n\t}\n\t\n}\n\nmodule.exports = CircuitDesigner;","// @flow\n\nvar IOObject = require(\"./ioobjects/IOObject\");\n\nclass Propagation {\n\treceiver: IOObject;\n\tsignal: boolean;\n\t\n\tconstructor(receiver: IOObject, signal: boolean) {\n\t\tthis.receiver = receiver;\n\t\tthis.signal = signal;\n\t}\n\t\n\tsend(): void {\n\t\tthis.receiver.activate(this.signal);\n\t}\n\t\n}\n\nmodule.exports = Propagation;","// @flow\nvar Vector = require(\"../../utils/math/Vector\");\nvar Transform = require(\"../../utils/math/Transform\");\nvar V = Vector.V;\n\nvar IOObject   = require(\"./IOObject\")\nvar Wire       = require(\"./Wire\");\nvar InputPort  = require(\"./InputPort\")\nvar OutputPort = require(\"./OutputPort\")\n\nclass Component extends IOObject {\n    inputs: Array<InputPort>;\n    outputs: Array<OutputPort>;\n        \n    transform: Transform;\n\t\n    // constructor(context, x, y, w, h, img, isPressable, maxInputs, maxOutputs, selectionBoxWidth, selectionBoxHeight) {\n\tconstructor(numInputs: number, numOutputs: number, isPressable: boolean, size: Vector = V(1, 1)) {\n        super();\n        \n\t\tthis.inputs = [];\n\t\tthis.outputs = [];\n                \n        this.transform = new Transform(V(0,0), size, 0);\n\t\t\n\t\t// Create and initialize each port\n\t\tfor (var i = 0; i < numInputs; i++)\n\t\t\tthis.inputs.push(new InputPort(this));\n\t\tfor (var i = 0; i < numOutputs; i++)\n\t\t\tthis.outputs.push(new OutputPort(this));\n\t}\n\t\n\t// @Override\n\tactivate(signal: boolean, i: number = 0): void {\n\t\t// Don't try to activate an Output component since it has no outputs\n\t\tif (this.outputs.length == 0)\n\t\t\treturn;\n\t\t\n\t\tthis.outputs[i].activate(signal);\n\t}\n\t\n\tconnect(i: number, w: Wire) : void{\n\t\tthis.outputs[i].connect(w);\n\t}\n\t\n\tsetInput(i: number, w: Wire): void {\n\t\tthis.inputs[i].setInput(w);\n\t}\n    \n    setPos(v: Vector): void {\n        this.transform.setPos(v);\n    }\n\t\n\tgetInput(i: number): InputPort {\n\t\treturn this.inputs[i];\n\t}\n    \n    getInputCount(): number {\n        return this.inputs.length;\n    }\n\t\n\tgetOutput(i: number): OutputPort {\n\t\treturn this.outputs[i];\n\t}\n    \n    getOutputCount(): number {\n        return this.outputs.length;\n    }\n    \n    getTransform(): Transform {\n        return this.transform;\n    }\n    \n\tgetImageName() {\n\t\treturn \"base.svg\";\n\t}\n}\n\nmodule.exports = Component;\n","// @flow\nvar Vector = require(\"../../utils/math/Vector\");\nvar V = Vector.V;\n\nvar Component = require(\"./Component\");\n\nclass Gate extends Component {\n    not: boolean;\n    \n    constructor(numInputs: number, numOutputs: number, size: Vector = V(1, 1)) {\n        super(numInputs, numOutputs, false, size);\n    }\n}\n\nmodule.exports = Gate;","// @flow\n\nvar CircuitDesigner = require(\"../CircuitDesigner\");\n\nclass IOObject {\n    designer: CircuitDesigner;\n    \n    constructor() {\n    }\n    \n    activate(signal: boolean, i: number = 0): void {\n    }\n    \n\tsetDesigner(designer: CircuitDesigner): void {\n\t\tthis.designer = designer;\n\t}\n\n\tgetDesigner(): CircuitDesigner {\n\t\treturn this.designer;\n\t}\n    \n}\n\nmodule.exports = IOObject;","// @flow\nvar IO_PORT_LENGTH = require(\"../../utils/Constants\").IO_PORT_LENGTH;\nvar Vector = require(\"../../utils/math/Vector\");\nvar V = Vector.V;\n\nvar Component = require(\"./Component\");\nvar Wire      = require(\"./Wire\");\n\nclass InputPort {\n\tparent: Component;\n\tinput: ?Wire;\n\tisOn: boolean;\n\t\n\torigin: Vector;\n\ttarget: Vector;\n\t\n\tconstructor(parent: Component) {\n\t\tthis.parent = parent;\n\t\tthis.input = undefined;\n\t\tthis.isOn = false;\n\t\t\n\t\tthis.origin = V(0, 0);\n\t\tthis.target = V(-IO_PORT_LENGTH, 0);\n\t}\n\t\n\tactivate(signal: boolean) {\n\t\t// Don't do anything if signal is same as current state\n\t\tif (signal == this.isOn)\n\t\t\treturn;\n\t\t\n\t\tthis.isOn = signal;\n\t\tthis.parent.getDesigner().propogate(this.parent, this.isOn);\n\t}\n\t\n\tsetInput(input: Wire): void {\n\t\tthis.input = input;\n\t}\n\t\n\tgetOrigin(): Vector {\n\t\treturn this.origin;\n\t}\n\tgetTarget(): Vector {\n\t\treturn this.target;\n\t}\n\t\n}\n\nmodule.exports = InputPort;","// @flow\nvar IO_PORT_LENGTH = require(\"../../utils/Constants\").IO_PORT_LENGTH;\nvar Vector = require(\"../../utils/math/Vector\");\nvar V = Vector.V;\n\nvar Component = require(\"./Component\");\nvar Wire      = require(\"./Wire\");\n\nclass OutputPort {\n\tparent: Component;\n    connections: Array<Wire>;\n    isOn: boolean;\n\t\n\torigin: Vector;\n\ttarget: Vector;\n    \n\tconstructor(parent: Component) {\n\t\tthis.parent = parent;\n\t\tthis.connections = [];\n\t\tthis.isOn = false;\n\t\t\n\t\tthis.origin = V(0, 0);\n\t\tthis.target = V(IO_PORT_LENGTH, 0);\n\t}\n\t\n\tactivate(signal: boolean): void {\n\t\t// Don't do anything if signal is same as current state\n\t\tif (signal == this.isOn)\n\t\t\treturn;\n\t\t\n\t\tthis.isOn = signal;\n\t\tfor (var w of this.connections)\n\t\t\tthis.parent.getDesigner().propogate(w, this.isOn);\n\t}\n\t\n\tconnect(w: Wire): void {\n\t\tthis.connections.push(w);\n\t}\n\t\n\tgetOrigin(): Vector {\n\t\treturn this.origin;\n\t}\n\tgetTarget(): Vector {\n\t\treturn this.target;\n\t}\n\t\n}\n\nmodule.exports = OutputPort;","// @flow\n\nvar IOObject   = require(\"./IOObject\");\nvar OutputPort = require(\"./OutputPort\");\nvar InputPort  = require(\"./InputPort\");\n\nclass Wire extends IOObject {\n    input: OutputPort;\n    output: InputPort;\n    isOn: boolean;\n\t\n\tconstructor(input: OutputPort, output: InputPort) {\n        super();\n        \n\t\tthis.input = input;\n\t\tthis.output = output;\n\t}\n    \n    // @Override\n\tactivate(signal: boolean): void {\n\t\t// Don't do anything if signal is same as current state\n\t\tif (signal == this.isOn)\n\t\t\treturn;\n\t\t\n\t\tthis.isOn = signal;\n\t\tif (this.output != null)\n\t\t\tthis.output.activate(signal);\n\t}\n\t\n\tsetInput(c: OutputPort): void {\n\t\tthis.input = c;\n\t}\n\t\n\tsetOutput(c: InputPort): void {\n\t\tthis.output = c;\n\t}\n    \n}\n\nmodule.exports = Wire;","// @flow\nvar V = require(\"../../../utils/math/Vector\").V;\nvar Gate = require(\"../Gate\");\n\nclass ANDGate extends Gate {\n\t\n\tconstructor() {\n\t\tsuper(2, 1, V(60, 60));\n\t}\n\t\n\t// @Override\n\tactivate(signal: boolean) {\n\t\tvar on = true;\n\t\tfor (var i = 0; i < this.inputs.length; i++)\n\t\t\ton = (on && this.inputs[i].isOn);\n\t\tsuper.activate(on);\n\t}\n\t\n\t\n    getDisplayName() {\n        return this.not ? \"NAND Gate\" : \"AND Gate\";\n    }\n\t\n\tgetImageName() {\n\t\treturn \"and.svg\";\n\t}\n\tstatic getXMLName() {\n\t\treturn \"andgate\"\n\t}\n}\n\nmodule.exports = ANDGate;","// @flow\n\nvar V = require(\"../../../utils/math/Vector\").V;\nvar Component = require(\"../Component\");\n\nclass Switch extends Component {\n\t\n\tconstructor() {\n\t\tsuper(0, 1, true, V(60, 60));\n\t}\n\t\n    // @Override\n\tactivate(signal: boolean): void {\n\t\tsuper.activate(signal, 0);\n\t}\n\t\n\tgetImageName() {\n\t\treturn \"switchUp.svg\";\n\t}\n}\n\nmodule.exports = Switch;","// @flow\n\nvar V = require(\"../../../utils/math/Vector\").V;\nvar Component = require(\"../Component\");\n\nclass LED extends Component {\n\t\n\tconstructor() {\n\t\tsuper(1, 0, false, V(60, 60));\n\t}\n\t\n\tisOn(): boolean {\n\t\treturn this.inputs[0].isOn;\n\t}\n\t\n\tgetImageName() {\n\t\treturn \"led.svg\";\n\t}\n}\n\nmodule.exports = LED;","// @flow\n\n// Code from https://stackoverflow.com/questions/5916900/how-can-you-detect-the-version-of-a-browser\nfunction getBrowser(): {name: string, version: string} {\n    if (navigator == undefined)\n        return {name: \"unknown\", version: \"unknown\"};\n    var ua=navigator.userAgent,tem,M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n    if(/trident/i.test(M[1])) {\n        tem=/\\brv[ :]+(\\d+)/g.exec(ua) || [];\n        return {name:'IE',version:(tem[1]||'')};\n    }\n    if(M[1]==='Chrome') {\n        tem=ua.match(/\\bOPR|Edge\\/(\\d+)/)\n        if(tem!=null)   {return {name:'Opera', version:tem[1]};}\n    }\n    M=M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n    tem = (tem=ua.match(/version\\/(\\d+)/i));\n    if(tem!=null) {M.splice(1,1,tem[1]);}\n    return {\n      name: M[0],\n      version: M[1]\n    };\n}\n \nmodule.exports = getBrowser();\n","// @flow\nvar Vector = require(\"./math/Vector\");\nvar V = Vector.V;\nvar Transform = require(\"./math/Transform\");\nvar Matrix2x3 = require(\"./math/Matrix\");\nvar TransformContains = require(\"./math/MathUtils\").TransformContains;\n\nclass Camera {\n    pos: Vector;\n    zoom: number;\n    \n    center: Vector;\n    transform: Transform;\n    \n    mat: Matrix2x3;\n    inv: Matrix2x3;\n    \n    width: number;\n    height: number;\n    \n    dirty: boolean;\n    \n    constructor(width: number, height: number, startPos: Vector = V(0, 0), startZoom: number = 1) {\n        this.width = width;\n        this.height = height;\n        this.pos = startPos;\n        this.zoom = startZoom;\n        this.center = V(0,0);\n        this.transform = new Transform(V(0,0), V(0,0), 0);\n        this.dirty = true;\n    }\n    resize(width: number, height: number): void {\n        this.width = width;\n        this.height = height;\n        this.center = V(this.width, this.height).scale(0.5);\n    }\n    updateMatrix(): void {\n        if (!this.dirty)\n            return;\n        this.dirty = false;\n\n        this.mat = new Matrix2x3();\n        this.mat.translate(this.pos);\n        this.mat.scale(V(this.zoom, this.zoom));\n        this.inv = this.mat.inverse();\n\n        var p1 = this.getWorldPos(V(0, 0));\n        var p2 = this.getWorldPos(V(this.width, this.height));\n        this.transform.setPos(p2.add(p1).scale(0.5));\n        this.transform.setSize(p2.sub(p1));\n    }\n    translate(dx: number, dy: number): void {\n        this.dirty = true;\n        this.pos.x += dx;\n        this.pos.y += dy;\n    }\n    zoomBy(s: number): void {\n        this.dirty = true;\n        this.zoom *= s;\n    }\n    cull(transform: Transform): boolean {\n        // getCurrentContext().getRenderer().save();\n        // transform.transformCtx(getCurrentContext().getRenderer().context);\n        // getCurrentContext().getRenderer().rect(0, 0, transform.size.x, transform.size.y, '#ff00ff');\n        // getCurrentContext().getRenderer().restore();\n\n        return TransformContains(transform, this.getTransform());\n    }\n    getTransform(): Transform {\n        this.updateMatrix();\n        return this.transform;\n    }\n    getMatrix(): Matrix2x3 {\n        this.updateMatrix();\n        return this.mat;\n    }\n    getInverseMatrix(): Matrix2x3 {\n        this.updateMatrix();\n        return this.inv;\n    }\n    getScreenPos(v: Vector): Vector {\n        return this.getInverseMatrix().mul(v).add(this.center);\n    }\n    getWorldPos(v: Vector): Vector {\n        return this.getMatrix().mul(v.sub(this.center));\n    }\n}\n\nmodule.exports = Camera;","//@flow \nvar Constants = {};\n\nConstants.DEFAULT_SIZE = 50;\nConstants.GRID_SIZE    = 50;\nConstants.DEFAULT_FILL_COLOR    = \"#ffffff\";\nConstants.DEFAULT_BORDER_COLOR  = \"#000000\";\nConstants.DEFAULT_ON_COLOR      = \"#3cacf2\";\nConstants.SELECTED_FILL_COLOR   = \"#1cff3e\";\nConstants.SELECTED_BORDER_COLOR = \"#0d7f1f\";\n\nConstants.IO_PORT_LENGTH = 60;\nConstants.IO_PORT_RADIUS = 7;\nConstants.IO_PORT_BORDER_WIDTH = 1;\nConstants.IO_PORT_LINE_WIDTH   = 2;\n\nConstants.WIRE_DIST_THRESHOLD  = 5;\nConstants.WIRE_DIST_THRESHOLD2 = Math.pow(Constants.WIRE_DIST_THRESHOLD, 2);\nConstants.WIRE_DIST_ITERATIONS = 10;\nConstants.WIRE_NEWTON_ITERATIONS = 5;\nConstants.WIRE_SNAP_THRESHOLD    = 10;\n\nConstants.ROTATION_CIRCLE_RADIUS = 75;\nConstants.ROTATION_CIRCLE_THICKNESS = 5;\nConstants.ROTATION_CIRCLE_THRESHOLD = 5;\nConstants.ROTATION_CIRCLE_R1 = Math.pow(Constants.ROTATION_CIRCLE_RADIUS - Constants.ROTATION_CIRCLE_THRESHOLD, 2);\nConstants.ROTATION_CIRCLE_R2 = Math.pow(Constants.ROTATION_CIRCLE_RADIUS + Constants.ROTATION_CIRCLE_THRESHOLD, 2);\n\nConstants.SIDENAV_WIDTH = 200;\nConstants.ITEMNAV_WIDTH = 200;\n\nConstants.LEFT_MOUSE_BUTTON  = 0;\nConstants.RIGHT_MOUSE_BUTTON = 1;\n\nConstants.OPTION_KEY = 18;\nConstants.SHIFT_KEY  = 16;\nConstants.BACKSPACE_KEY = 8;\nConstants.DELETE_KEY = 46;\nConstants.ENTER_KEY  = 13;\nConstants.ESC_KEY    = 27;\nConstants.A_KEY = 65;\nConstants.C_KEY = 67;\nConstants.V_KEY = 86;\nConstants.X_KEY = 88;\nConstants.Y_KEY = 89;\nConstants.Z_KEY = 90;\nConstants.CONTROL_KEY = 17;\nConstants.COMMAND_KEY = 91;\n\nmodule.exports = Constants;","// \n\nvar Images = (function() {\n    var images = [];\n    \n    var loadImages = function(imageNames: Array<string>, \n                              index: number, \n                              onFinish: () => void): void {\n        var img = new Image();//Object.create(Image);\n        img.onload = function() {\n            images[imageNames[index]] = img;\n            img.dx = 0;\n            img.dy = 0;\n            img.ratio = img.width / img.height;\n            if (index === imageNames.length-1)\n                onFinish();\n            else\n                loadImages(imageNames, index+1, onFinish);\n        };\n        img.src = \"img/items/\" + imageNames[index];\n        console.log(img.src);\n    }\n    \n    return {\n        Load: function(onFinishLoading: () => void): void {\n            loadImages(\n                [\"constLow.svg\", \"constHigh.svg\",\n                 \"buttonUp.svg\", \"buttonDown.svg\",\n                 \"switchUp.svg\", \"switchDown.svg\",\n                 \"led.svg\", \"ledLight.svg\",\n                 \"buffer.svg\", \"and.svg\",\n                 \"or.svg\", \"xor.svg\",\n                 \"segment1.svg\", \"segment2.svg\",\n                 \"segment3.svg\", \"segment4.svg\",\n                 \"clock.svg\", \"clockOn.svg\",\n                 \"keyboard.svg\", \"base.svg\"], 0, onFinishLoading);\n        },\n        GetImage: function(img): Image {\n            return images[img];\n        }\n    };\n})();\n\nmodule.exports = Images;","// @flow\nvar Transform = require(\"./Transform\");\n\nvar MathUtils = (function() {\n    return {\n        /**\n         * Compares two transforms to see if they overlap.\n         * First tests it using a quick circle-circle\n         * intersection using the 'radius' of the transform\n         *\n         * Then uses a SAT (Separating Axis Theorem) method\n         * to determine whether or not the two transforms\n         * are intersecting\n         *\n         * @param  {Transform} a\n         *         The first transform\n         *\n         * @param  {Transform} b\n         *         The second transform\n         *\n         * @return {Boolean}\n         *         True if the two transforms are overlapping,\n         *         false otherwise\n         */\n        TransformContains: function(A: Transform, B: Transform) {\n            // If both transforms are non-rotated\n            if (Math.abs(A.getAngle()) <= 1e-5 && Math.abs(B.getAngle()) <= 1e-5) {\n                var aPos = A.getPos(), aSize = A.getSize();\n                var bPos = B.getPos(), bSize = B.getSize();\n                return (Math.abs(aPos.x - bPos.x) * 2 < (aSize.x + bSize.x)) &&\n                       (Math.abs(aPos.y - bPos.y) * 2 < (aSize.y + bSize.y));\n            }\n\n            // Quick check circle-circle intersection\n            var r1 = A.getRadius();\n            var r2 = B.getRadius();\n            var sr = r1 + r2;                       // Sum of radius\n            var dpos = A.getPos().sub(B.getPos());  // Delta position\n            if (dpos.dot(dpos) > sr*sr)\n                return false;\n\n            /* Perform SAT */\n\n            // Get corners in local space of transform A\n            var a = A.getLocalCorners();\n\n            // Transform B's corners into A local space\n            var bworld = B.getCorners();\n            var b = [];\n            for (var i = 0; i < 4; i++) {\n                b[i] = A.toLocalSpace(bworld[i]);\n\n                // Offsets x and y to fix perfect lines\n                // where b[0] = b[1] & b[2] = b[3]\n                b[i].x += 0.0001*i;\n                b[i].y += 0.0001*i;\n            }\n\n            var corners = a.concat(b);\n\n            var minA, maxA, minB, maxB;\n\n            // SAT w/ x-axis\n            // Axis is <1, 0>\n            // So dot product is just the x-value\n            minA = maxA = corners[0].x;\n            minB = maxB = corners[4].x;\n            for (var j = 1; j < 4; j++) {\n                minA = Math.min(corners[j].x, minA);\n                maxA = Math.max(corners[j].x, maxA);\n                minB = Math.min(corners[j+4].x, minB);\n                maxB = Math.max(corners[j+4].x, maxB);\n            }\n            if (maxA < minB || maxB < minA)\n                return false;\n\n            // SAT w/ y-axis\n            // Axis is <1, 0>\n            // So dot product is just the y-value\n            minA = maxA = corners[0].y;\n            minB = maxB = corners[4].y;\n            for (var j = 1; j < 4; j++) {\n                minA = Math.min(corners[j].y, minA);\n                maxA = Math.max(corners[j].y, maxA);\n                minB = Math.min(corners[j+4].y, minB);\n                maxB = Math.max(corners[j+4].y, maxB);\n            }\n            if (maxA < minB || maxB < minA)\n                return false;\n\n            // SAT w/ other two axes\n            var normals = [b[3].sub(b[0]), b[3].sub(b[2])];\n            for (var i = 0; i < normals.length; i++) {\n                var normal = normals[i];\n                var minA = Infinity, maxA = -Infinity;\n                var minB = Infinity, maxB = -Infinity;\n                for (var j = 0; j < 4; j++) {\n                    var s = corners[j].dot(normal);\n                    minA = Math.min(s, minA);\n                    maxA = Math.max(s, maxA);\n                    var s2 = corners[j+4].dot(normal);\n                    minB = Math.min(s2, minB);\n                    maxB = Math.max(s2, maxB);\n                }\n                if (maxA < minB || maxB < minA)\n                    return false;\n            }\n\n            return true;\n        }\n    };\n})();\n\nmodule.exports = MathUtils;","// @flow\nvar Vector = require(\"./Vector\");\nvar V = Vector.V;\n\nclass Matrix2x3 {\n    mat: Array<number>\n    \n    constructor(other: ?Matrix2x3) {\n        this.mat = [];\n        this.identity();\n        if (other instanceof Matrix2x3) {\n            for (var i = 0; i < 2*3; i++)\n                this.mat[i] = other.mat[i];\n        }\n    }\n    zero(): Matrix2x3 {\n        for (var i = 0; i < 2*3; i++)\n            this.mat[i] = 0;\n        return this;\n    }\n    identity(): Matrix2x3 {\n        this.zero();\n\n        this.mat[0] = 1.0;\n        this.mat[3] = 1.0;\n\n        return this;\n    }\n    mul(v: Vector): Vector {\n        var result = V(0,0);\n        result.x = this.mat[0] * v.x + this.mat[2] * v.y + this.mat[4];\n        result.y = this.mat[1] * v.x + this.mat[3] * v.y + this.mat[5];\n        return result;\n    }\n    mult(m: Matrix2x3): Matrix2x3 {\n        var result = new Matrix2x3();\n        result.mat[0] = this.mat[0]*m.mat[0] + this.mat[2]*m.mat[1];\n        result.mat[1] = this.mat[1]*m.mat[0] + this.mat[3]*m.mat[1];\n        result.mat[2] = this.mat[0]*m.mat[2] + this.mat[2]*m.mat[3];\n        result.mat[3] = this.mat[1]*m.mat[2] + this.mat[3]*m.mat[3];\n        result.mat[4] = this.mat[0]*m.mat[4] + this.mat[2]*m.mat[5] + this.mat[4];\n        result.mat[5] = this.mat[1]*m.mat[4] + this.mat[3]*m.mat[5] + this.mat[5];\n        return result;\n    }\n    translate(v: Vector): void {\n        this.mat[4] += this.mat[0] * v.x + this.mat[2] * v.y;\n        this.mat[5] += this.mat[1] * v.x + this.mat[3] * v.y;\n    }\n    rotate(theta: number): void {\n        var c = Math.cos(theta);\n        var s = Math.sin(theta);\n        var m11 = this.mat[0] * c + this.mat[2] * s;\n        var m12 = this.mat[1] * c + this.mat[3] * s;\n        var m21 = this.mat[0] * -s + this.mat[2] * c;\n        var m22 = this.mat[1] * -s + this.mat[3] * c;\n        this.mat[0] = m11;\n        this.mat[1] = m12;\n        this.mat[2] = m21;\n        this.mat[3] = m22;\n    }\n    scale(s: Vector): void {\n        this.mat[0] *= s.x;\n        this.mat[1] *= s.x;\n        this.mat[2] *= s.y;\n        this.mat[3] *= s.y;\n    }\n    inverse(): Matrix2x3 {\n        var inv = new Array(3*2);\n        var det;\n\n        inv[0] = this.mat[3];\n        inv[1] = -this.mat[1];\n        inv[2] = -this.mat[2];\n        inv[3] = this.mat[0];\n        inv[4] = this.mat[2] * this.mat[5] -\n                 this.mat[4] * this.mat[3];\n        inv[5] = this.mat[4] * this.mat[1] -\n                 this.mat[0] * this.mat[5];\n\n        det = this.mat[0]*this.mat[3] - this.mat[1]*this.mat[2];\n\n        if (det == 0)\n            return new Matrix2x3();\n\n        det = 1.0 / det;\n\n        var m = new Matrix2x3();\n        for (var i = 0; i < 2*3; i++)\n            m.mat[i] = inv[i] * det;\n\n        return m;\n    }\n    print(): void {\n        console.log(\"[\" + this.mat[0].toFixed(3) + \", \" + this.mat[2].toFixed(3) + \", \" + this.mat[4].toFixed(3) + \"]\\n\" +\n                    \"[\" + this.mat[1].toFixed(3) + \", \" + this.mat[3].toFixed(3) + \", \" + this.mat[5].toFixed(3) + \"]\");\n    }\n    copy(): Matrix2x3 {\n        return new Matrix2x3(this);\n    }\n}\n\nmodule.exports = Matrix2x3;","// @flow\nvar Vector = require(\"./Vector\");\nvar Matrix2x3 = require(\"./Matrix\");\nvar V = Vector.V;\n\nclass Transform {\n    parent: ?Transform;\n    pos: Vector;\n    scale: Vector;\n    angle: number;\n    size: Vector;\n    \n    corners: Array<Vector>;\n    localCorners: Array<Vector>;\n    \n    dirty: boolean;\n    dirtySize: boolean;\n    dirtyCorners: boolean;\n    \n    matrix: Matrix2x3;\n    inverse: Matrix2x3;\n    radius: number;\n    \n    constructor(pos: Vector, size: Vector, angle: number = 0) {\n        this.parent = undefined;\n        this.pos = V(pos.x, pos.y);\n        this.size = V(size.x, size.y);\n        this.angle = angle;\n        this.scale = V(1, 1);\n        this.corners = [];\n        this.localCorners = [];\n        this.dirty = true;\n        this.dirtySize = true;\n        this.dirtyCorners = true;\n        this.updateMatrix();\n    }\n    updateMatrix(): void {\n        if (!this.dirty)\n            return;\n        this.dirty = false;\n\n        this.matrix = new Matrix2x3();\n        this.matrix.translate(this.pos);\n        this.matrix.rotate(this.angle);\n        this.matrix.scale(this.scale);\n\n        if (this.parent != undefined)\n            this.matrix = this.parent.getMatrix().mult(this.matrix);\n\n        this.inverse = this.matrix.inverse();\n    }\n    updateSize(): void {\n        if (!this.dirtySize)\n            return;\n        this.dirtySize = false;\n\n        this.localCorners = [this.size.scale(V(-0.5, 0.5)), this.size.scale(V(0.5, 0.5)),\n                             this.size.scale(V(0.5, -0.5)), this.size.scale(V(-0.5, -0.5))];\n\n        this.radius = Math.sqrt(this.size.x*this.size.x + this.size.y*this.size.y)/2;\n    }\n    updateCorners(): void {\n        if (!this.dirtyCorners)\n            return;\n        this.dirtyCorners = false;\n\n        var corners = this.getLocalCorners();\n        for (var i = 0; i < 4; i++)\n            this.corners[i] = this.toWorldSpace(corners[i]);\n    }\n    rotateAbout(a: number, c: Vector): void {\n        this.setAngle(a);\n        this.setPos(this.pos.sub(c));\n        var cos = Math.cos(a), sin = Math.sin(a);\n        var xx = this.pos.x * cos - this.pos.y * sin;\n        var yy = this.pos.y * cos + this.pos.x * sin;\n        this.setPos(V(xx, yy).add(c));\n        this.dirty = true;\n        this.dirtyCorners = true;\n    }\n    setParent(t: Transform): void {\n        this.parent = t;\n        this.dirty = true;\n        this.dirtyCorners = true;\n    }\n    // setCamera(c) {\n    //     this.camera = c;\n    // }\n    setPos(p: Vector): void {\n        this.pos.x = p.x;\n        this.pos.y = p.y;\n        this.dirty = true;\n        this.dirtyCorners = true;\n    }\n    setAngle(a: number): void {\n        this.angle = a;\n        this.dirty = true;\n        this.dirtyCorners = true;\n    }\n    setScale(s: Vector): void {\n        this.scale.x = s.x;\n        this.scale.y = s.y;\n        this.dirty = true;\n    }\n    setSize(s: Vector): void {\n        this.size.x = s.x;\n        this.size.y = s.y;\n        this.dirtySize = true;\n        this.dirtyCorners = true;\n    }\n    setWidth(w: number): void {\n        this.size.x = w;\n        this.dirtySize = true;\n        this.dirtyCorners = true;\n    }\n    setHeight(h: number): void {\n        this.size.y = h;\n        this.dirtySize = true;\n        this.dirtyCorners = true;\n    }\n    toLocalSpace(v: Vector): Vector { // v must be in world coords\n        return this.getInverseMatrix().mul(v);\n    }\n    toWorldSpace(v: Vector): Vector { // v must be in local coords\n        return this.getMatrix().mul(v);\n    }\n    getPos(): Vector {\n        return V(this.pos.x, this.pos.y);\n    }\n    getAngle(): number {\n        return this.angle;\n    }\n    getScale(): Vector {\n        return V(this.scale.x, this.scale.y);\n    }\n    getSize(): Vector {\n        return this.size;\n    }\n    getRadius(): number {\n        this.updateSize();\n        return this.radius;\n    }\n    getMatrix(): Matrix2x3 {\n        this.updateMatrix();\n        return this.matrix;\n    }\n    getInverseMatrix(): Matrix2x3 {\n        this.updateMatrix();\n        return this.inverse;\n    }\n    getBottomLeft(): Vector {\n        this.updateCorners();\n        return this.corners[0];\n    }\n    getBottomRight(): Vector {\n        this.updateCorners();\n        return this.corners[1];\n    }\n    getTopRight(): Vector {\n        this.updateCorners();\n        return this.corners[2];\n    }\n    getTopLeft(): Vector {\n        this.updateCorners();\n        return this.corners[3];\n    }\n    getCorners(): Array<Vector> {\n        this.updateCorners();\n        return this.corners;\n    }\n    getLocalCorners(): Array<Vector> {\n        this.updateSize();\n        return this.localCorners;\n    }\n    equals(other: Transform): boolean {\n        var m1 = this.getMatrix().mat;\n        var m2 = other.getMatrix().mat;\n        for (var i = 0; i < m1.length; i++) {\n            if (m1[i] !== m2[i])\n                return false;\n        }\n        return true;\n    }\n    print(): void {\n        this.updateMatrix();\n        this.matrix.print();\n    }\n    copy(): Transform {\n        var trans = new Transform(this.pos.copy(), this.size.copy(), this.angle);\n        trans.scale = this.scale.copy();\n        trans.dirty = true;\n        return trans;\n    }\n}\n\nmodule.exports = Transform;","// @flow\n\n\nclass Vector {\n    x: number;\n    y: number;\n    \n    constructor(x: Vector | number, y: ?number) {\n        this.set(x, y);\n    }\n    set(x: Vector | number, y: ?number): void {\n        if (x instanceof Vector) {\n            this.x = (x.x ? x.x : 0);\n            this.y = (x.y ? x.y : 0);\n        } else if (y != null) {\n            this.x = (x ? x : 0);\n            this.y = (y ? y : 0);\n        } else {\n            throw new Error(\"Undefined parameters passed to Vector.set! ${x}, ${y}\");\n        }\n    }\n    translate(dx: Vector | number, dy: ?number): void {\n        if (dx instanceof Vector)\n            this.set(this.add(dx));\n        else if (dy != null)\n            this.set(this.x + dx, this.y + dy);\n        else\n            throw new Error(\"Undefined parameters passed to Vector.translate! ${dx}, ${dy}\");\n    }\n    add(x: Vector | number, y: ?number): Vector {\n        if (x instanceof Vector)\n            return new Vector(this.x + x.x, this.y + x.y);\n        if (y != null)\n            return new Vector(this.x + x, this.y + y);\n        throw new Error(\"Undefined parameters passed to Vector.add! ${x}, ${y}\");\n    }\n    sub(x: Vector | number, y: ?number): Vector {\n        if (x instanceof Vector)\n            return new Vector(this.x - x.x, this.y - x.y);\n        if (y != null)\n            return new Vector(this.x - x, this.y - y);\n        throw new Error(\"Undefined parameters passed to Vector.sub! ${x}, ${y}\");\n    }\n    scale(a: Vector | number): Vector {\n        if (a instanceof Vector)\n            return new Vector(a.x * this.x, a.y * this.y);\n        return new Vector(a * this.x, a * this.y);\n    }\n    normalize(): Vector {\n        var len = this.len();\n        if (len === 0) {\n            return new Vector(0, 0);\n        } else {\n            var invLen = 1 / len;\n            return new Vector(this.x * invLen, this.y * invLen);\n        }\n    }\n    len(): number {\n        return Math.sqrt(this.x*this.x + this.y*this.y);\n    }\n    len2(): number {\n        return this.x*this.x + this.y*this.y;\n    }\n    distanceTo(v: Vector): number {\n        return this.sub(v).len();\n    }\n    dot(v: Vector): number {\n        return this.x * v.x + this.y * v.y;\n    }\n    project(v: Vector): Vector {\n        return this.scale(v.dot(this) / this.len2());\n    }\n    copy(): Vector {\n        return new Vector(this.x, this.y);\n    }\n    \n    static V(x: Vector | number, y: ?number): Vector {\n        return new Vector(x, y);\n    }\n}\n\nmodule.exports = Vector;\n","// @flow\nvar V = require(\"../math/Vector\").V;\nvar Renderer = require(\"./Renderer\");\nvar Camera = require(\"../Camera\");\n\nvar GRID_SIZE = 50;\n\nvar Grid = (function() {\n    \n    return {\n        render(renderer: Renderer, camera: Camera) {\n            var step = GRID_SIZE/camera.zoom;\n\n            var cpos = V(camera.pos.x/camera.zoom - renderer.canvas.width/2, camera.pos.y/camera.zoom - renderer.canvas.height/2);\n\n            var cpx = cpos.x - Math.floor(cpos.x / step) * step;\n            if (cpx < 0) cpx += step;\n            var cpy = cpos.y - Math.floor(cpos.y / step) * step;\n            if (cpy < 0) cpy += step;\n\n            // Batch-render the lines = uglier code + way better performance\n            renderer.save();\n            renderer.setStyles(undefined, '#999', 1 / camera.zoom);\n            renderer.context.beginPath();\n            for (var x = -cpx; x <= renderer.canvas.width-cpx+step; x += step) {\n                renderer._line(x, 0, x, renderer.canvas.height);\n            }\n            for (var y = -cpy; y <= renderer.canvas.height-cpy+step; y += step) {\n                renderer._line(0, y, renderer.canvas.width, y);\n            }\n            renderer.context.closePath();\n            renderer.context.stroke();\n            renderer.restore();\n        }\n    };\n})();\n\nmodule.exports = Grid;","// @flow\nvar Vector = require(\"../math/Vector\");\nvar V = Vector.V;\nvar Transform = require(\"../math/Transform\");\nvar Browser = require(\"../Browser\");\nvar Camera = require(\"../Camera\");\n\nclass Renderer {\n    canvas: HTMLCanvasElement;\n    tintCanvas: HTMLCanvasElement;\n    context: CanvasRenderingContext2D;\n    tintContext: CanvasRenderingContext2D;\n    \n    vw: number;\n    vh: number;\n    \n    constructor(canvas: HTMLCanvasElement, vw: number = 1.0, vh: number = 1.0): void {\n        this.canvas = canvas;\n        this.tintCanvas = document.createElement(\"canvas\");\n        this.vw = vw;\n        this.vh = vh;\n\n        this.context = this.canvas.getContext(\"2d\");\n\n        this.tintCanvas.width = 100;\n        this.tintCanvas.height = 100;\n        this.tintContext = this.tintCanvas.getContext(\"2d\");\n    }\n    setCursor(cursor: string): void {\n        this.canvas.style.cursor = cursor;\n    }\n    resize(): void {\n        this.canvas.width = window.innerWidth * this.vw;\n        this.canvas.height = window.innerHeight * this.vh;\n    }\n    clear(): void {\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    save(): void {\n        this.context.save();\n    }\n    restore(): void {\n        this.context.restore();\n    }\n    transform(camera: Camera, transform: Transform) {\n        var m = transform.getMatrix().copy();\n        var v = camera.getScreenPos(V(m.mat[4], m.mat[5]));\n        m.mat[4] = v.x, m.mat[5] = v.y;\n        m.scale(V(1/camera.zoom, 1/camera.zoom));\n        this.context.setTransform(m.mat[0], m.mat[1], m.mat[2], m.mat[3], m.mat[4], m.mat[5]);\n    }\n    translate(v: Vector): void {\n        this.context.translate(v.x, v.y);\n    }\n    scale(s: Vector): void {\n        this.context.scale(s.x, s.y);\n    }\n    rotate(a: number): void {\n        this.context.rotate(a);\n    }\n    rect(x: number, y: number, w: number, h: number, \n        fillStyle: string, borderStyle: string, \n        borderSize: number, alpha: ?number): void {\n        this.save();\n        this.setStyles(fillStyle, borderStyle, borderSize, alpha);\n        this.context.beginPath();\n        this.context.rect(x - w/2, y - h/2, w, h);\n        this.context.fill();\n        if (borderSize > 0 || borderSize == undefined)\n            this.context.stroke();\n        this.context.closePath();\n        this.restore();\n    }\n    circle(x: number, y: number, r: number, \n        fillStyle: string, borderStyle: string, \n        borderSize: number, alpha: ?number): void {\n        this.save();\n        this.setStyles(fillStyle, borderStyle, borderSize, alpha);\n        this.context.beginPath();\n        this.context.arc(x, y, r, 0, 2*Math.PI);\n        if (fillStyle != undefined)\n            this.context.fill();\n        if (borderSize > 0 || borderSize == undefined)\n            this.context.stroke();\n        this.context.closePath();\n        this.restore();\n    }\n    image(img: Image, x: number, y: number, w: number, h: number, tint: ?string): void {\n        this.context.drawImage(img, x - w/2, y - h/2, w, h);\n        if (tint != undefined)\n            this.tintImage(img, x, y, w, h, tint);\n    }\n    tintImage(img: Image, x: number, y: number, w: number, h: number, tint: string): void {\n        this.tintContext.clearRect(0, 0, this.tintCanvas.width, this.tintCanvas.height);\n        this.tintContext.fillStyle = tint;\n        this.tintContext.fillRect(0, 0, this.tintCanvas.width, this.tintCanvas.height);\n        if (Browser.name !== \"Firefox\")\n            this.tintContext.globalCompositeOperation = \"destination-atop\";\n        else\n            this.tintContext.globalCompositeOperation = \"source-atop\";\n        this.tintContext.drawImage(img, 0, 0, this.tintCanvas.width, this.tintCanvas.height);\n        this.context.globalAlpha = 0.5;\n        this.context.drawImage(this.tintCanvas, x - w/2, y - h/2, w, h);\n        this.context.globalAlpha = 1.0;\n    }\n    text(txt: string, x: number, y: number, w: number, h: number, textAlign: string): void {\n        this.save();\n        this.context.font = \"lighter 15px arial\";\n        this.context.fillStyle = '#000';\n        this.context.textAlign = textAlign;\n        this.context.textBaseline = \"middle\";\n        this.context.fillText(txt, x, y);\n        this.restore();\n    }\n    getTextWidth(txt: string): number {\n        var width = 0;\n        this.save();\n        this.context.font = \"lighter 15px arial\";\n        this.context.fillStyle = '#000';\n        this.context.textBaseline = \"middle\";\n        width = this.context.measureText(txt).width;\n        this.restore();\n        return width;\n    }\n    line(x1: number, y1: number, x2: number, y2: number, style: string, size: number): void {\n        this.save();\n        this.setStyles(undefined, style, size);\n        this.context.beginPath();\n        this.context.moveTo(x1, y1);\n        this.context.lineTo(x2, y2);\n        this.context.stroke();\n        this.context.closePath();\n        this.restore();\n    }\n    _line(x1: number, y1: number, x2: number, y2: number): void {\n        this.context.moveTo(x1, y1);\n        this.context.lineTo(x2, y2);\n    }\n    curve(x1: number, y1: number, x2: number, y2: number, \n          cx1: number, cy1: number, cx2: number, cy2: number, \n          style: string, size: number): void {\n        this.save();\n        this.setStyles(undefined, style, size);\n        this.context.beginPath();\n        this.context.moveTo(x1, y1);\n        this.context.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);\n        this.context.stroke();\n        this.context.closePath();\n        this.restore();\n    }\n    quadCurve(x1: number, y1: number, x2: number, y2: number,\n              cx: number, cy: number, style: string, size: number): void {\n        this.save();\n        this.setStyles(undefined, style, size);\n        this.context.beginPath();\n        this.context.moveTo(x1, y1);\n        this.context.quadraticCurveTo(cx, cy, x2, y2);\n        this.context.stroke();\n        this.context.closePath();\n        this.restore();\n    }\n    shape(points: Array<Vector>, fillStyle: string, borderStyle: string, borderSize: number): void {\n        this.save();\n        this.setStyles(fillStyle, borderStyle, borderSize);\n        this.context.beginPath();\n        this.context.moveTo(points[0].x, points[0].y);\n        for (var i = 1; i < points.length; i++)\n            this.context.lineTo(points[i].x, points[i].y);\n        this.context.lineTo(points[0].x, points[0].y);\n        this.context.fill();\n        this.context.closePath();\n        if (borderSize > 0)\n            this.context.stroke();\n        this.restore();\n    }\n    setStyles(fillStyle: string = '#ffffff', borderStyle: string = '#000000', \n              borderSize: number = 2, alpha: ?number): void {\n        if (alpha != undefined && alpha !== this.context.globalAlpha)\n            this.context.globalAlpha = alpha;\n\n        if (fillStyle !== this.context.fillStyle)\n            this.context.fillStyle = fillStyle;\n\n        if (borderStyle !== this.context.strokeStyle)\n            this.context.strokeStyle = borderStyle;\n\n        if (borderSize !== this.context.lineWidth)\n            this.context.lineWidth = borderSize;\n    }\n}\n\nmodule.exports = Renderer;","// @flow\nvar V = require(\"../../math/Vector\").V;\nvar Renderer = require(\"../Renderer\");\nvar IOPortRenderer = require(\"./IOPortRenderer\");\nvar Camera = require(\"../../Camera\");\nvar Component = require(\"../../../models/ioobjects/Component\");\n\nvar Images = require(\"../../Images\");\n\n// var ANDGate = require(\"../../../models/ioobjects/gates/ANDGate\");\n// var Switch = require(\"../../../models/ioobjects/inputs/Switch\");\n// var LED = require(\"../../../models/ioobjects/outputs/LED\");\n\nvar ComponentRenderer = (function() {\n    var images = [];\n    \n    return {\n        render(renderer: Renderer, camera: Camera, object: Component, selected: boolean) {\n            renderer.save();\n            \n            var transform = object.getTransform();\n            \n            renderer.transform(camera, transform);\n            \n            for (var i = 0; i < object.getInputCount(); i++)\n                IOPortRenderer.renderIPort(renderer, camera, object.getInput(i),  selected);\n            \n            for (var i = 0; i < object.getOutputCount(); i++)\n                IOPortRenderer.renderOPort(renderer, camera, object.getOutput(i), selected);\n            \n            // if (this.isPressable && this.selectionBoxTransform != undefined)\n            //     renderer.rect(0, 0, this.selectionBoxTransform.size.x, this.selectionBoxTransform.size.y, this.getCol(), this.getBorderColor());\n            \n            renderer.image(Images.GetImage(object.getImageName()), 0, 0, transform.size.x, transform.size.y);\n            \n            renderer.restore();\n        }\n    };\n})();\n\nmodule.exports = ComponentRenderer;","// @flow\nvar DEFAULT_FILL_COLOR    = require(\"../../Constants\").DEFAULT_FILL_COLOR;\nvar DEFAULT_BORDER_COLOR  = require(\"../../Constants\").DEFAULT_BORDER_COLOR;\nvar DEFAULT_ON_COLOR      = require(\"../../Constants\").DEFAULT_ON_COLOR;\nvar SELECTED_FILL_COLOR   = require(\"../../Constants\").SELECTED_FILL_COLOR;\nvar SELECTED_BORDER_COLOR = require(\"../../Constants\").SELECTED_BORDER_COLOR;\nvar IO_PORT_LINE_WIDTH    = require(\"../../Constants\").IO_PORT_LINE_WIDTH;\nvar IO_PORT_RADIUS        = require(\"../../Constants\").IO_PORT_RADIUS;\nvar IO_PORT_BORDER_WIDTH  = require(\"../../Constants\").IO_PORT_BORDER_WIDTH;\n\nvar V = require(\"../../math/Vector\").V;\nvar Renderer = require(\"../Renderer\");\nvar Camera = require(\"../../Camera\");\nvar InputPort = require(\"../../../models/ioobjects/InputPort\");\nvar OutputPort = require(\"../../../models/ioobjects/OutputPort\");\n\nvar IOPortRenderer = (function() {\n    return {\n        renderIPort(renderer: Renderer, camera: Camera, iport: InputPort, selected: boolean) {\n            var o = iport.getOrigin();\n            var v = iport.getTarget();\n            \n            var borderCol = (selected ? SELECTED_BORDER_COLOR : DEFAULT_BORDER_COLOR);\n            renderer.line(o.x, o.y, v.x, v.y, borderCol, IO_PORT_LINE_WIDTH);\n            \n            var circleFillCol = (selected ? SELECTED_FILL_COLOR : DEFAULT_FILL_COLOR);\n            renderer.circle(v.x, v.y, IO_PORT_RADIUS, circleFillCol, borderCol, IO_PORT_BORDER_WIDTH);\n        },\n        renderOPort(renderer: Renderer, camera: Camera, oport: OutputPort, selected: boolean) {\n            var o = oport.getOrigin();\n            var v = oport.getTarget();\n            \n            var borderCol = (selected ? SELECTED_BORDER_COLOR : DEFAULT_BORDER_COLOR);\n            renderer.line(o.x, o.y, v.x, v.y, borderCol, IO_PORT_LINE_WIDTH);\n            \n            var circleFillCol = (selected ? SELECTED_FILL_COLOR : DEFAULT_FILL_COLOR);\n            renderer.circle(v.x, v.y, IO_PORT_RADIUS, circleFillCol, borderCol, IO_PORT_BORDER_WIDTH);\n        }\n    };\n})();\n\nmodule.exports = IOPortRenderer;","// @flow\nvar V = require(\"../../math/Vector\").V;\nvar Renderer = require(\"../Renderer\");\nvar Camera = require(\"../../Camera\");\nvar Wire = require(\"../../../models/ioobjects/Wire\");\n\nvar WireRenderer = (function() {\n    return {\n        render(renderer: Renderer, camera: Camera, wire: Wire, selected: boolean) {\n            \n        }\n    };\n})();\n\nmodule.exports = WireRenderer;","// @flow\nvar Camera            = require(\"../utils/Camera\");\nvar Renderer          = require(\"../utils/rendering/Renderer\");\nvar Grid              = require(\"../utils/rendering/Grid\");\nvar WireRenderer      = require(\"../utils/rendering/ioobjects/WireRenderer\");\nvar ComponentRenderer = require(\"../utils/rendering/ioobjects/ComponentRenderer\");\n\nvar CircuitDesigner = require(\"../models/CircuitDesigner\");\nvar IOObject        = require(\"../models/ioobjects/IOObject\");\nvar Wire            = require(\"../models/ioobjects/Wire\");\nvar Component       = require(\"../models/ioobjects/Component\");\n\nclass MainDesignerView {\n    canvas: HTMLCanvasElement;\n    renderer: Renderer;\n    camera: Camera;\n    \n    constructor() {\n        var canvas = document.getElementById(\"canvas\");\n        if (!(canvas instanceof HTMLCanvasElement))\n            throw new Error(\"Canvas element not found!\");\n        this.canvas = canvas;\n        this.renderer = new Renderer(this.canvas);\n        this.camera = new Camera(this.canvas.width, this.canvas.height);\n        \n        window.addEventListener('resize', e => this.resize(), false);\n        this.resize();\n    }\n    render(designer: CircuitDesigner, selections: Array<IOObject>) {\n        this.renderer.clear();\n        \n        Grid.render(this.renderer, this.camera);\n        \n        var wires = designer.getWires();\n        for (var wire: Wire of wires) {\n            var selected = selections.includes(wire);\n            WireRenderer.render(this.renderer, this.camera, wire, selected);\n        }\n        \n        var objects = designer.getObjects();\n        for (var object: Component of objects) {\n            var selected = selections.includes(object);\n            ComponentRenderer.render(this.renderer, this.camera, object, selected);\n        }\n    }\n    resize(): void {\n        this.renderer.resize();\n        this.camera.resize(this.canvas.width, this.canvas.height);\n    }\n}\n\nmodule.exports = MainDesignerView;"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}